---

- name: Test task Zulu
  debug: 
    var: java_vendor

- name: Test task Zulu
  debug: 
    var: ansible_architecture

# -------------------------------------------------
# Azul API Doc:
# > https://api.azul.com/metadata/v1/docs/swagger
# -------------------------------------------------
- name: getting package download url for arm
  uri: 
    url: "https://api.azul.com/metadata/v1/zulu/packages/?java_version={{java_major}}&os=linux-glibc&arch=arm&java_package_type=jre&javafx_bundled=false&crac_supported=false&latest=true&release_status=ga&availability_types=CA&certifications=tck&archive_type=tar.gz"
    return_content: yes
  register: zulu_download_url

- name: install directory
  file: 
    path: "{{ install_path }}"
    state: directory
    recurse: yes

- name: Download latest
  unarchive:
    src: "{{ zulu_download_url.json | json_query('[0].download_url') }}"
    dest: "{{ install_path }}"
    remote_src: yes
  register: zulu_jdk_downloaded
  when: ansible_architecture != "x86_64"


- name: show name
  debug:
    var: zulu_jdk_downloaded 

- name: linking 
  file:
    src: "{{ install_path }}/{{ zulu_download_url.json | json_query('[0].download_url')| basename | splitext | first | splitext | first }}"
    dest: "/{{ install_path }}/java"
    state: link

- name: Clean up downloaded archive
  file:
    path: "{{ install_path }}/{{ zulu_download_url.json | json_query('[0].download_url')| basename }}"
    state: absent

- name: Define environment variables
  set_fact:
    java_home: 'JAVA_HOME={{ install_path }}/java'

- name: Create symbolic link to 'java' executable
  file:
    src: '{{ install_path }}/java/bin/java'
    dest: /usr/bin/java
    state: link
    force: true

- name: Create symbolic link to 'javac' executable
  file:
    src: '{{ install_path }}/java/bin/javac'
    dest: /usr/bin/javac
    state: link
    force: true
  when: java_bundle_type == "jdk"
  
- name: Adding PATH
  copy:
    src: java.sh
    dest: /etc/profile.d/java.sh
  
